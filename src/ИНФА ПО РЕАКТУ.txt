

Приложение реакта работает на ЦЕЛЕВОМ компе (браузере),
поэтому ip берётся относительно него, в т.ч. localhost будет считаться на целевом компе,
а не на компе, где сервер реакта




В функциональной компоненте люьые сайд-эффекты (в т.ч. dispatch(action/thunk)) делаем в хуках (useEffect),
потому что по идеологии компонента должна возврщать другой jsx только при изменении props/localState,
но перерисовываться она может хоть сколко, главное чтобы jsx был один при одинаковых пропсах.
Реакт в dev mode может перерисовывать компоненту 2+ раз прост о так!!!



ДО ЗАВЕРШЕНИЯ МЕТОДА КОЛБЭКА НОВЫЕ ПРОПСЫ НЕ ПОСТУПЯТ В КОМПОНЕНТУ!!!
И все необходимые изменённые параметры надо кидать в аргументы функции.



Если в state ссылка на объект не изменилась, то он считается неизменным и компонента не перерисуется.


style прямо в теге
<div className="nav-wrapper blue darken-1" style={{ padding: '0 2rem', margin: "5px" }}>...</div>



Передача URL в props - withRouter
1) connect(mstp, mdtp)(withRouter(Component))
2) Указываем переменную в <Route path="profile/:userId?" .... />
: - начало переменной
? - если есть, то параметр необязателен
3) достаём userId из props.match.params.userId




HOC - High Order Component - даёт дополнительный функционал нашей компоненте
(в данном случае перенаправляет на страницу логина если не авторизованы)
(можно внутри написать классовую компоненту вместо функциональной):

const mapStateToPropsForRedirect = (state) => ({
    isAuth: state.auth.isAuth,
});
export const withAuthRedirect =
    (Component) =>
        connect(mapStateToPropsForRedirect)(
            (props) => {
                if (!props.isAuth) return <Redirect to={"/login"}/>
                return <Component {...props}/>
        })

Использование:
... = connect(mstp, mdtp)(withAuthRedirect(Component));




componentDidMount (или useEffect(()=>{...}) ) вызовется,
когда эта компонента и всё её дерево дочерних компонент отрендерится




CONTEXT
Context provides a way to pass data through the component tree without having to pass props down
manually at every level.




ХУКи
Хуки — нововведение в React 16.8, которое позволяет использовать состояние и
другие возможности React без написания классов.
Пользовательский хук — это JavaScript-функция, имя которой начинается с «use» (очень желательно),
и которая может вызывать другие хуки (не обязатиельно).
По факту реакт воспринимает хуки как обычные функции.
Хук НЕЛЬЗЯ юзать в циклах и условных ветвлениях
(т.е. хук должен при каждом рендере вызываться столько, сколько он явно написан в коде).
По факту просто выносят логику из компоненты в удобное место и используются удобным способом.
https://ru.reactjs.org/docs/hooks-reference.html#usecallback

Про массив зависимостей deps:
undefined - хук будет выполнятся каждый раз при рендере
[] - хук выполнится только при первом рендере
[...values] - хук выполнится при изменении хотя бы одной зависимости

useCallback:
const fn = useCallback(fn, deps);
const memoiedCallback = useCallback( ()=>doSomething(a,b), [a,b] );

useCallback возвращает функцию-колбэк (мемоизированный колбэк), который создаётся заново,
если поменялся хоть один параметр в массиве зависимостей.

useCallback(fn, deps) — это эквивалент useMemo(() => fn, deps)

useMemo:
const val = useMemo(fn, deps);
const memoizedValue = useMemo( ()=>{return computeVal(a,b)}, [a,b] );
Возвращает результат переданной ему функции.
При изменении зависимости значение вычисляется заново.